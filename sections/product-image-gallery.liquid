{% schema %}
  {
    "name": "Product Image Gallery",
    "settings": [
      {
        "type": "select",
        "id": "image_fit",
        "label": "Image Fit",
        "options": [
          {
            "value": "cover",
            "label": "Cover"
          },
          {
            "value": "contain",
            "label": "Contain"
          }
        ],
        "default": "cover"
      },
      {
        "type": "range",
        "id": "image_height",
        "min": 200,
        "max": 800,
        "step": 50,
        "unit": "px",
        "label": "Image Height",
        "default": 500
      }
    ],
    "presets": [
      {
        "name": "Product Image Gallery",
        "category": "Product"
      }
    ]
  }
  {% endschema %}
  
  {% liquid 
    assign products_to_display = product.images.size 
    assign total_slides = 1
    if products_to_display > 3
      assign total_slides = products_to_display | minus: 2
    endif
  %}
  
  <div class="product-media-gallery isolate gradient">
    <slider-component class="slider-mobile-gutter page-width">
      <div
        id="ProductMediaSlider"
        class="product-media-grid"
        role="list"
        aria-label="{{ 'general.slider.name' | t }}"
      >
        {%- for i in (0..2) -%}
          {%- if forloop.index0 < product.images.size -%}
            {%- assign media = product.images[forloop.index0] -%}
            <div class="product-media-item">
              {{ media 
                | image_url: width: 1000 
                | image_tag: 
                  loading: 'lazy', 
                  class: 'product-media-image',
                  alt: media.alt | escape
              }}
            </div>
          {%- endif -%}
        {%- endfor -%}
      </div>
  
      {%- if products_to_display > 3 -%}
        <div class="slider-buttons">
          <button
            type="button"
            class="slider-button slider-button--prev"
            name="previous"
            aria-label="{{ 'general.slider.previous_slide' | t }}"
          >
            ←
          </button>
          <div class="slider-counter caption">
            <span class="slider-counter--current">1</span>
            <span aria-hidden="true"> / </span>
            <span class="visually-hidden">{{ 'general.slider.of' | t }}</span>
            <span class="slider-counter--total">{{ total_slides }}</span>
          </div>
          <button
            type="button"
            class="slider-button slider-button--next"
            name="next"
            aria-label="{{ 'general.slider.next_slide' | t }}"
          >
            →
          </button>
        </div>
      {%- endif -%}
    </slider-component>
  </div>
  
  <style>
    .product-media-gallery {
      position: relative;
      width: 100%;
      overflow: hidden;
    }
  
    .product-media-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 10px;
      transition: transform 0.5s ease;
    }
  
    .product-media-image {
      width: 100%;
      height: {{ section.settings.image_height }}px;
      object-fit: {{ section.settings.image_fit }};
    }
  
    .slider-buttons {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-top: 10px;
    }
  
    .slider-button {
      background: none;
      border: none;
      cursor: pointer;
      padding: 10px;
      font-size: 24px;
    }
  
    .slider-counter {
      font-size: 14px;
      color: #888;
      margin: 0 15px;
    }
  </style>
  
  <script>
    class SliderComponent extends HTMLElement {
      constructor() {
        super();
        this.slider = this.querySelector('#ProductMediaSlider');
        this.prevButton = this.querySelector('.slider-button--prev');
        this.nextButton = this.querySelector('.slider-button--next');
        this.currentSlideCounter = this.querySelector('.slider-counter--current');
        
        // Get product images from the page directly
        this.sliderItems = this.slider.querySelectorAll('.product-media-item');
        this.images = Array.from(this.sliderItems).map(item => {
          const img = item.querySelector('img');
          return {
            src: img ? img.src : '',
            alt: img ? img.alt : ''
          };
        });
        
        this.currentIndex = 0;
        this.totalSlides = Math.max(1, this.images.length - 2);
        
        this.initializeSlider();
      }
      
      initializeSlider() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => this.scrollToPrevSlide());
        }
        
        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => this.scrollToNextSlide());
        }
      }
      
      scrollToNextSlide() {
        if (this.currentIndex < this.totalSlides - 1) {
          this.currentIndex++;
          this.updateSliderContent();
        }
      }
      
      scrollToPrevSlide() {
        if (this.currentIndex > 0) {
          this.currentIndex--;
          this.updateSliderContent();
        }
      }
      
      updateSliderContent() {
        for (let i = 0; i < 3; i++) {
          const imageIndex = this.currentIndex + i;
          if (imageIndex < this.images.length) {
            const img = this.images[imageIndex];
            const sliderItem = this.sliderItems[i];
            
            // Only update if we have a valid image
            if (img.src) {
              sliderItem.innerHTML = `
                <img 
                  src="${img.src}" 
                  alt="${img.alt}" 
                  loading="lazy" 
                  class="product-media-image" 
                  style="width: 100%; height: 500px; object-fit: cover;"
                >`;
            }
          }
        }
        
        // Update slide counter
        if (this.currentSlideCounter) {
          this.currentSlideCounter.textContent = this.currentIndex + 1;
        }
      }
    }
  
    customElements.define('slider-component', SliderComponent);
  </script>