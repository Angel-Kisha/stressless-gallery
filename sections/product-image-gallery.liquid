```liquid
{% schema %}
  {
    "name": "Product Image Gallery",
    "settings": [
      {
        "type": "select",
        "id": "image_fit",
        "label": "Image Fit",
        "options": [
          {
            "value": "cover",
            "label": "Cover"
          },
          {
            "value": "contain",
            "label": "Contain"
          }
        ],
        "default": "cover"
      },
      {
        "type": "range",
        "id": "image_height",
        "min": 200,
        "max": 800,
        "step": 50,
        "unit": "px",
        "label": "Image Height",
        "default": 500
      }
    ],
    "presets": [
      {
        "name": "Product Image Gallery",
        "category": "Product"
      }
    ]
  }
{% endschema %}

<style>
  .product-media-gallery {
    position: relative;
    width: 100%;
  }

  .product-media-grid {
    display: flex;
    overflow-x: hidden;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
    gap: 10px;
    padding: 0;
    list-style: none;
  }

  .product-media-grid .grid__item {
    flex: 0 0 100%;
    scroll-snap-align: start;
    opacity: 0;
    transition: opacity 0.3s ease;
    display: none;
  }

  .product-media-grid .grid__item.is-active {
    display: block;
    opacity: 1;
  }

  .product-media-image {
    width: 100%;
    height: {{ section.settings.image_height }}px;
    object-fit: {{ section.settings.image_fit }};
  }

  .slider-buttons {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 10px;
    width: 100%;
  }

  .slider-button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 10px;
  }

  .slider-counter {
    font-size: 14px;
    color: #888;
  }
</style>

{%- liquid
  assign variant_images = product.images | where: 'attached_to_variant?', true | map: 'src'
  assign products_to_display = product.images.size

  assign columns_mobile_int = 2
  assign show_mobile_slider = false
  if products_to_display > columns_mobile_int
    assign show_mobile_slider = true
  endif

  assign show_desktop_slider = false
  if products_to_display > 4
    assign show_desktop_slider = true
  endif
-%}

<div class="product-media-gallery isolate gradient">
  <slider-component class="slider-mobile-gutter page-width{% if show_desktop_slider %} slider-component-desktop{% endif %}">
    <ul
      id="ProductMediaSlider"
      class="grid product-media-grid contains-card grid--4-col-desktop grid--2-col-tablet-down{% if show_mobile_slider or show_desktop_slider %} slider{% if show_desktop_slider %} slider--desktop{% endif %}{% if show_mobile_slider %} slider--tablet grid--peek{% endif %}{% endif %}"
      role="list"
      aria-label="{{ 'general.slider.name' | t }}"
    >
      {%- for media in product.media -%}
        <li
          id="Slide-{{ forloop.index }}"
          class="grid__item{% if show_mobile_slider or show_desktop_slider %} slider__slide{% endif %}{% if forloop.first %} is-active{% endif %}"
        >
          {% if media.media_type == 'image' %}
            {{ media.preview_image 
              | image_url: width: 1000 
              | image_tag: 
                loading: 'lazy', 
                class: 'product-media-image',
                alt: media.alt | escape
            }}
          {% endif %}
        </li>
      {%- endfor -%}
    </ul>

    {%- if products_to_display > 1 -%}
      <div class="slider-buttons">
        <button
          type="button"
          class="slider-button slider-button--prev"
          name="previous"
          aria-label="{{ 'general.slider.previous_slide' | t }}"
          aria-controls="ProductMediaSlider"
        >
          ←
        </button>
        <div class="slider-counter caption">
          <span class="slider-counter--current">1</span>
          <span aria-hidden="true"> / </span>
          <span class="visually-hidden">{{ 'general.slider.of' | t }}</span>
          <span class="slider-counter--total">{{ products_to_display }}</span>
        </div>
        <button
          type="button"
          class="slider-button slider-button--next"
          name="next"
          aria-label="{{ 'general.slider.next_slide' | t }}"
          aria-controls="ProductMediaSlider"
        >
          →
        </button>
      </div>
    {%- endif -%}
  </slider-component>
</div>

<script>
  class SliderComponent extends HTMLElement {
    constructor() {
      super();
      this.slider = this.querySelector('ul');
      this.sliderItems = this.slider.querySelectorAll('.grid__item');
      this.prevButton = this.querySelector('.slider-button--prev');
      this.nextButton = this.querySelector('.slider-button--next');
      this.currentSlideCounter = this.querySelector('.slider-counter--current');
      this.totalSlidesCounter = this.querySelector('.slider-counter--total');
      
      this.currentIndex = 0;
      
      this.initializeSlider();
    }
    
    initializeSlider() {
      if (this.prevButton) {
        this.prevButton.addEventListener('click', () => this.scrollToPrevSlide());
      }
      
      if (this.nextButton) {
        this.nextButton.addEventListener('click', () => this.scrollToNextSlide());
      }
    }
    
    scrollToNextSlide() {
      this.currentIndex++;
      if (this.currentIndex >= this.sliderItems.length) {
        this.currentIndex = 0;
      }
      this.updateSliderPosition();
    }
    
    scrollToPrevSlide() {
      this.currentIndex--;
      if (this.currentIndex < 0) {
        this.currentIndex = this.sliderItems.length - 1;
      }
      this.updateSliderPosition();
    }
    
    updateSliderPosition() {
      // Remove active class from all slides
      this.sliderItems.forEach(slide => slide.classList.remove('is-active'));
      
      // Get current slide
      const slideToShow = this.sliderItems[this.currentIndex];
      
      // Add active class to current slide
      slideToShow.classList.add('is-active');
      
      // Update slide counter
      if (this.currentSlideCounter) {
        this.currentSlideCounter.textContent = this.currentIndex + 1;
      }
    }
  }

  customElements.define('slider-component', SliderComponent);
</script>
```