{% schema %}
  {
  "name": "Product Image Gallery",
  "settings": [
  {
  "type": "select",
  "id": "image_fit",
  "label": "Image Fit",
  "options": [
  {
  "value": "cover",
  "label": "Cover"
  },
  {
  "value": "contain",
  "label": "Contain"
  }
  ],
  "default": "cover"
  },
  {
  "type": "range",
  "id": "image_height",
  "min": 200,
  "max": 800,
  "step": 50,
  "unit": "px",
  "label": "Image Height",
  "default": 500
  },
  {
  "type": "range",
  "id": "padding_top",
  "min": 0,
  "max": 100,
  "step": 5,
  "unit": "px",
  "label": "Padding Top",
  "default": 20
  },
  {
  "type": "range",
  "id": "padding_bottom",
  "min": 0,
  "max": 100,
  "step": 5,
  "unit": "px",
  "label": "Padding Bottom",
  "default": 20
  },
  {
  "type": "range",
  "id": "padding_left",
  "min": 0,
  "max": 100,
  "step": 5,
  "unit": "px",
  "label": "Padding Left",
  "default": 20
  },
  {
  "type": "range",
  "id": "padding_right",
  "min": 0,
  "max": 100,
  "step": 5,
  "unit": "px",
  "label": "Padding Right",
  "default": 20
  },
  {
  "type": "color",
  "id": "background_color",
  "label": "Background Color",
  "default": "#ffffff"
  }
  ],
  "presets": [
  {
  "name": "Product Image Gallery",
  "category": "Product"
  }
  ]
  }
{% endschema %}
  <div class="product-media-gallery position-relative gradient {% if product.images.size <= 2 %}product-media-gallery--centered{% endif %}" style="background-color: {{ section.settings.background_color }}; padding: {{ section.settings.padding_top }}px {{ section.settings.padding_right }}px {{ section.settings.padding_bottom }}px {{ section.settings.padding_left }}px;">
    <slider-components class="slider-mobile-gutter">
      <div
        id="ProductMediaSlider"
        class="product-media-grid"
        role="list"
        aria-label="{{ 'general.slider.name' | t }}"
      >
        {%- for media in product.images limit: 10 -%}
          <div class="product-media-item">
            {% assign image_url = media | image_url: width: 2000 %}
            {% assign full_image_url = media | image_url: width: 4000 %}
            <img 
              src="{{ image_url }}" 
              class="product-media-image" 
              loading="lazy" 
              alt="{{ media.alt | escape }}"
              data-full-src="{{ full_image_url }}"
              width="auto"
              height="auto"
            >
          </div>
        {%- endfor -%}
      </div>

    {%- if product.images.size > 3 -%}
      <div class="slider-navigation">
        <div class="slider-dots">
          {% assign total_slides = product.images.size | minus: 2 %}
          {%- for _ in (1..total_slides) -%}
            <button 
              type="button" 
              class="slider-dot {% if forloop.first %}slider-dot--active{% endif %}"
              data-slide-index="{{ forloop.index0 }}"
              aria-label="Go to slide {{ forloop.index }}"
            ></button>
          {%- endfor -%}
        </div>
      </div>
    {%- endif -%}
    </slider-components>

    <!-- Zoom Modal -->
    <div id="imageZoomModal" class="image-zoom-modal">
      <span class="close-zoom">&times;</span>
      <div class="image-zoom-container">
        <img class="image-zoom-content" id="zoomedImage" width="auto" height="auto">
      </div>
    </div>
  </div>
  
  <style>
    .product-media-gallery {
      position: relative;
      width: 100%;
      overflow: hidden;
    }
  
    .product-media-grid {
      display: flex;
      width: 100%;
      gap: 77px;
      transition: transform 0.5s ease-in-out;
    }
  
    .product-media-gallery--centered .product-media-grid {
      justify-content: center;
      gap: 20px;
    }
  
    .product-media-gallery--centered .product-media-item {
      flex-shrink: 0;
    }
  
    .product-media-item {
      opacity: 1;
      cursor: zoom-in;
    }
  
    .product-media-image {
      width: 460px;
      height: {{ section.settings.image_height }}px;
      object-fit: {{ section.settings.image_fit }};
      pointer-events: auto;
    }
  
    .product-media-gallery--centered .product-media-image {
      width: auto;
      max-width: 100%;
    }
  
    .slider-navigation {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-top: 15px;
    }
  
    .slider-dots {
      display: flex;
      gap: 10px;
      align-items: center;
    }
  
    .slider-dot {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background-color: #e0e0e0;
      border: none;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
  
    .slider-dot--active {
      background-color: #333;
      width: 14px;
      height: 14px;
    }

    /* Zoom Modal Styles (unchanged) */
    .image-zoom-modal {
      display: none;
      position: fixed;
      z-index: 999999;
      left: 0;
      top: 0;
      width: 100vw;
      height: 100vh;
      overflow: hidden;
      background-color: rgba(0,0,0,0.9);
      align-items: center;
      justify-content: center;
    }

    .image-zoom-modal.show {
      display: flex;
    }

    .image-zoom-container {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      height: 100%;
      padding: 20px;
      box-sizing: border-box;
    }

    .image-zoom-content {
      max-width: 90%;
      max-height: 90%;
      object-fit: contain;
      cursor: zoom-in;
      transition: transform 0.3s ease;
    }

    .image-zoom-content.zoomed {
      cursor: zoom-out;
    }

    .close-zoom {
      position: absolute;
      top: 15px;
      right: 35px;
      color: #f1f1f1;
      font-size: 40px;
      font-weight: bold;
      cursor: pointer;
      z-index: 10000;
    }
  </style>

  <script>
    // JavaScript remains the same as in the previous version
    document.addEventListener('DOMContentLoaded', () => {
      class SliderComponents extends HTMLElement {
        constructor() {
          super();
          this.slider = this.querySelector('#ProductMediaSlider');
          this.sliderDots = this.querySelectorAll('.slider-dot');
          
          // Get all image items
          this.imageItems = Array.from(this.querySelectorAll('.product-media-item'));
          
          // Initialize state
          this.currentIndex = 0;
          this.visibleSlides = 3;
          this.totalImages = this.imageItems.length;
          this.totalSlides = this.totalImages - this.visibleSlides + 1;
          
          // Zoom modal elements
          this.zoomModal = document.getElementById('imageZoomModal');
          this.zoomedImage = document.getElementById('zoomedImage');
          this.closeZoomBtn = this.zoomModal.querySelector('.close-zoom');
          
          this.initializeSlider();
          this.initializeZoom();
        }
        
        initializeSlider() {
          // Skip slider initialization if less than 3 images
          if (this.totalImages <= 3) {
            return;
          }
          
          // Setup navigation buttons
          if (this.prevButton) {
            this.prevButton.addEventListener('click', () => this.scrollToPrevSlide());
          }
          
          if (this.nextButton) {
            this.nextButton.addEventListener('click', () => this.scrollToNextSlide());
          }
          
          // Initial render and button state
          this.updateSliderContent();
          this.updateNavigationButtons();
        }
        
        initializeZoom() {
          // Add click event to all product media images
          this.imageItems.forEach(item => {
            const image = item.querySelector('.product-media-image');
            image.addEventListener('click', (e) => {
              e.preventDefault();
              this.openZoom(image);
            });
          });
          
          // Close zoom modal when clicking close button
          if (this.closeZoomBtn) {
            this.closeZoomBtn.addEventListener('click', () => this.closeZoom());
          }
          
          // Close zoom modal when clicking outside image
          this.zoomModal.addEventListener('click', (e) => {
            if (e.target === this.zoomModal || e.target === this.zoomedImage) {
              this.closeZoom();
            }
          });
          
          // Close zoom modal with Escape key
          document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.zoomModal.classList.contains('show')) {
              this.closeZoom();
            }
          });
        }
        
        openZoom(image) {
          // Get full-size image URL
          const fullImageSrc = image.getAttribute('data-full-src');
          
          // Set the zoomed image source
          this.zoomedImage.src = fullImageSrc;
          
          // Show the zoom modal
          this.zoomModal.classList.add('show');
          
          // Reset zoom state
          this.zoomedImage.classList.remove('zoomed');
          this.zoomedImage.style.transform = 'scale(1)';
          
          // Add zoom interaction to zoomed image
          this.setupZoomInteraction();
        }
        
        setupZoomInteraction() {
          // Remove any existing click event listeners to prevent multiple bindings
          this.zoomedImage.onclick = null;
          
          // Toggle zoom on click
          this.zoomedImage.onclick = (e) => {
            e.stopPropagation();
            
            if (!this.zoomedImage.classList.contains('zoomed')) {
              // Zoom in
              this.zoomedImage.classList.add('zoomed');
              this.zoomedImage.style.transform = 'scale(2)';
            } else {
              // Zoom out
              this.zoomedImage.classList.remove('zoomed');
              this.zoomedImage.style.transform = 'scale(1)';
            }
          };
        }
        
        closeZoom() {
          // Hide the zoom modal
          this.zoomModal.classList.remove('show');
          
          // Reset zoom state
          this.zoomedImage.classList.remove('zoomed');
          this.zoomedImage.style.transform = 'scale(1)';
        }
        
        scrollToNextSlide() {
          if (this.currentIndex < this.totalSlides - 1) {
            this.currentIndex++;
            this.updateSliderContent();
            this.updateNavigationButtons();
          }
        }
        
        scrollToPrevSlide() {
          if (this.currentIndex > 0) {
            this.currentIndex--;
            this.updateSliderContent();
            this.updateNavigationButtons();
          }
        }
        
        updateNavigationButtons() {
          // Disable prev button if at first slide
          if (this.prevButton) {
            this.prevButton.disabled = (this.currentIndex === 0);
          }
          
          // Disable next button if at last slide
          if (this.nextButton) {
            this.nextButton.disabled = (this.currentIndex >= this.totalSlides - 1);
          }
          
          // Update slide counter
          if (this.currentSlideCounter) {
            this.currentSlideCounter.textContent = this.currentIndex + 1;
          }
        }
        
        updateSliderContent() {
          // Calculate the translation based on the width and gap
          const imageWidth = this.imageItems[0].offsetWidth;
          const gap = 77; // Matches the gap in CSS
          const translateX = -this.currentIndex * (imageWidth + gap);
          
          this.slider.style.transform = `translateX(${translateX}px)`;
        }
      }
    
      customElements.define('slider-components', SliderComponents);
    });
  </script>