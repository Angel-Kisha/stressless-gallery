{% schema %}
  {
    "name": "Product Image Gallery",
    "settings": [
      {
        "type": "select",
        "id": "image_fit",
        "label": "Image Fit",
        "options": [
          {
            "value": "cover",
            "label": "Cover"
          },
          {
            "value": "contain",
            "label": "Contain"
          }
        ],
        "default": "cover"
      },
      {
        "type": "range",
        "id": "image_height",
        "min": 200,
        "max": 800,
        "step": 50,
        "unit": "px",
        "label": "Image Height",
        "default": 500
      },
      {
        "type": "range",
        "id": "padding_top",
        "min": 0,
        "max": 100,
        "step": 5,
        "unit": "px",
        "label": "Padding Top",
        "default": 20
      },
      {
        "type": "range",
        "id": "padding_bottom",
        "min": 0,
        "max": 100,
        "step": 5,
        "unit": "px",
        "label": "Padding Bottom",
        "default": 20
      },
      {
        "type": "range",
        "id": "padding_left",
        "min": 0,
        "max": 100,
        "step": 5,
        "unit": "px",
        "label": "Padding Left",
        "default": 20
      },
      {
        "type": "range",
        "id": "padding_right",
        "min": 0,
        "max": 100,
        "step": 5,
        "unit": "px",
        "label": "Padding Right",
        "default": 20
      },
      {
        "type": "color",
        "id": "background_color",
        "label": "Background Color",
        "default": "#ffffff"
      }
    ],
    "presets": [
      {
        "name": "Product Image Gallery",
        "category": "Product"
      }
    ]
  }
  {% endschema %}
  
  <div class="product-media-gallery isolate gradient" style="background-color: {{ section.settings.background_color }}; padding: {{ section.settings.padding_top }}px {{ section.settings.padding_right }}px {{ section.settings.padding_bottom }}px {{ section.settings.padding_left }}px;">
    <slider-component class="slider-mobile-gutter">
      <div
        id="ProductMediaSlider"
        class="product-media-grid"
        role="list"
        aria-label="{{ 'general.slider.name' | t }}"
      >
        {%- for media in product.images limit: 10 -%}
          <div class="product-media-item">
            {{ media 
              | image_url: width: 1000 
              | image_tag: 
                loading: 'lazy', 
                class: 'product-media-image',
                alt: media.alt | escape
            }}
          </div>
        {%- endfor -%}
      </div>
  
      {%- if product.images.size > 3 -%}
        <div class="slider-buttons">
          <button
            type="button"
            class="slider-button slider-button--prev"
            name="previous"
            aria-label="{{ 'general.slider.previous_slide' | t }}"
          >
            ←
          </button>
          <div class="slider-counter caption">
            <span class="slider-counter--current">1</span>
            <span aria-hidden="true"> / </span>
            <span class="visually-hidden">{{ 'general.slider.of' | t }}</span>
            <span class="slider-counter--total">{{ product.images.size | minus: 2 }}</span>
          </div>
          <button
            type="button"
            class="slider-button slider-button--next"
            name="next"
            aria-label="{{ 'general.slider.next_slide' | t }}"
          >
            →
          </button>
        </div>
      {%- endif -%}
    </slider-component>
  </div>
  
  <style>
    .product-media-gallery {
      position: relative;
      width: 100%;
      overflow: hidden;
    }
  
    .product-media-grid {
      display: flex;
      width: 100%;
      gap: 77px;
      transition: transform 0.5s ease-in-out;
    }
  
    .product-media-item {
      opacity: 1;
    }
  
    .product-media-image {
      width: 460px;
      height: {{ section.settings.image_height }}px;
      object-fit: {{ section.settings.image_fit }};
    }
  
    .slider-buttons {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-top: 10px;
    }
  
    .slider-button {
      background: none;
      border: none;
      cursor: pointer;
      padding: 10px;
      font-size: 24px;
    }
  
    .slider-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
  
    .slider-counter {
      font-size: 14px;
      color: #888;
      margin: 0 15px;
    }
  </style>
  
  <script>
    class SliderComponent extends HTMLElement {
      constructor() {
        super();
        this.slider = this.querySelector('#ProductMediaSlider');
        this.prevButton = this.querySelector('.slider-button--prev');
        this.nextButton = this.querySelector('.slider-button--next');
        this.currentSlideCounter = this.querySelector('.slider-counter--current');
        
        // Get all image items
        this.imageItems = Array.from(this.querySelectorAll('.product-media-item'));
        
        // Initialize state
        this.currentIndex = 0;
        this.visibleSlides = 3;
        this.totalImages = this.imageItems.length;
        this.totalSlides = Math.max(1, this.totalImages - this.visibleSlides + 1);
        
        this.initializeSlider();
      }
      
      initializeSlider() {
        // Setup navigation buttons
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => this.scrollToPrevSlide());
        }
        
        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => this.scrollToNextSlide());
        }
        
        // Initial render and button state
        this.updateSliderContent();
        this.updateNavigationButtons();
      }
      
      scrollToNextSlide() {
        if (this.currentIndex < this.totalSlides ) {
          this.currentIndex++;
          this.updateSliderContent();
          this.updateNavigationButtons();
        }
      }
      
      scrollToPrevSlide() {
        if (this.currentIndex > 0) {
          this.currentIndex--;
          this.updateSliderContent();
          this.updateNavigationButtons();
        }
      }
      
      updateNavigationButtons() {
        // Disable prev button if at first slide
        if (this.prevButton) {
          this.prevButton.disabled = (this.currentIndex === 0);
        }
        
        // Disable next button if at last slide
        if (this.nextButton) {
          this.nextButton.disabled = (this.currentIndex >= this.totalSlides - 1);
        }
      }
      
      updateSliderContent() {
        // Calculate the translation based on current index
        const translateX = -this.currentIndex * (this.imageItems[0].offsetWidth + 10);
        this.slider.style.transform = `translateX(${translateX}px)`;
        
        // Update slide counter
        if (this.currentSlideCounter) {
          this.currentSlideCounter.textContent = this.currentIndex + 1;
        }
      }
    }
  
    customElements.define('slider-component', SliderComponent);
  </script>