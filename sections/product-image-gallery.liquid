{% schema %}
  {
    "name": "Product Image Gallery",
    "settings": [
      {
        "type": "select",
        "id": "image_fit",
        "label": "Image Fit",
        "options": [
          {
            "value": "cover",
            "label": "Cover"
          },
          {
            "value": "contain",
            "label": "Contain"
          }
        ],
        "default": "cover"
      },
      {
        "type": "range",
        "id": "image_height",
        "min": 200,
        "max": 800,
        "step": 50,
        "unit": "px",
        "label": "Image Height",
        "default": 500
      },
      {
        "type": "range",
        "id": "padding_top",
        "min": 0,
        "max": 100,
        "step": 5,
        "unit": "px",
        "label": "Padding Top",
        "default": 20
      },
      {
        "type": "range",
        "id": "padding_bottom",
        "min": 0,
        "max": 100,
        "step": 5,
        "unit": "px",
        "label": "Padding Bottom",
        "default": 20
      },
      {
        "type": "range",
        "id": "padding_left",
        "min": 0,
        "max": 100,
        "step": 5,
        "unit": "px",
        "label": "Padding Left",
        "default": 20
      },
      {
        "type": "range",
        "id": "padding_right",
        "min": 0,
        "max": 100,
        "step": 5,
        "unit": "px",
        "label": "Padding Right",
        "default": 20
      },
      {
        "type": "color",
        "id": "background_color",
        "label": "Background Color",
        "default": "#ffffff"
      }
    ],
    "presets": [
      {
        "name": "Product Image Gallery",
        "category": "Product"
      }
    ]
  }
{% endschema %}

<div class="product-media-gallery isolate gradient" style="background-color: {{ section.settings.background_color }}; padding: {{ section.settings.padding_top }}px {{ section.settings.padding_right }}px {{ section.settings.padding_bottom }}px {{ section.settings.padding_left }}px;">
  <slider-component class="slider-mobile-gutter">
    <div
      id="ProductMediaSlider"
      class="product-media-grid"
      role="list"
      aria-label="{{ 'general.slider.name' | t }}"
    >
      {%- for media in product.images limit: 10 -%}
        <div class="product-media-item">
          {{ media 
            | image_url: width: 1000 
            | image_tag: 
              loading: 'lazy', 
              class: 'product-media-image',
              alt: media.alt | escape
          }}
        </div>
      {%- endfor -%}
    </div>

    <div class="slider-navigation">
      <div class="slider-lines" role="tablist">
        {%- comment %} Lines will be dynamically generated via JavaScript {% endcomment %}
      </div>
    </div>
  </slider-component>
</div>

<style>
  .product-media-gallery {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .product-media-grid {
    display: flex;
    width: 100%;
    gap: 77px;
    transition: transform 0.5s ease-in-out;
  }

  .product-media-item {
    opacity: 1;
  }

  .product-media-image {
    width: 460px;
    height: {{ section.settings.image_height }}px;
    object-fit: {{ section.settings.image_fit }};
  }

  .slider-navigation {
    display: flex;
    justify-content: center;
    margin-top: 15px;
  }

  .slider-lines {
    display: flex;
    gap: 10px;
  }

  .slider-line {
    width: 50px;
    height: 4px;
    background-color: #e0e0e0;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .slider-line[aria-selected="true"] {
    background-color: #333;
  }
</style>

<script>
  class SliderComponent extends HTMLElement {
    constructor() {
      super();
      this.slider = this.querySelector('#ProductMediaSlider');
      this.sliderLinesContainer = this.querySelector('.slider-lines');
      
      // Get all image items
      this.imageItems = Array.from(this.querySelectorAll('.product-media-item'));
      
      // Initialize state
      this.currentIndex = 0;
      this.visibleSlides = 3;
      this.totalImages = this.imageItems.length;
      this.totalSlides = this.totalImages - this.visibleSlides + 1;
      
      this.initializeSlider();
    }
    
    initializeSlider() {
      // Create navigation lines dynamically
      this.createNavigationLines();
      
      // Get references to created lines
      this.sliderLines = Array.from(this.querySelectorAll('.slider-line'));
      
      // Setup line navigation
      this.sliderLines.forEach(line => {
        line.addEventListener('click', (event) => {
          const index = parseInt(event.target.getAttribute('data-index'), 10);
          this.goToSlide(index);
        });
      });
      
      // Initial render and line state
      this.updateSliderContent();
      this.updateNavigationLines();
    }
    
    createNavigationLines() {
      // Clear existing lines
      this.sliderLinesContainer.innerHTML = '';
      
      // Calculate number of visible slides
      const visibleSlidesCount = Math.min(this.visibleSlides, this.totalImages);
      
      // Create lines for currently visible slides
      for (let i = 0; i < visibleSlidesCount; i++) {
        const line = document.createElement('button');
        line.type = 'button';
        line.classList.add('slider-line');
        line.setAttribute('role', 'tab');
        line.setAttribute('aria-selected', 'false');
        line.setAttribute('data-index', i);
        
        this.sliderLinesContainer.appendChild(line);
      }
    }
    
    goToSlide(index) {
      if (index >= 0 && index < this.totalSlides) {
        this.currentIndex = index;
        this.updateSliderContent();
        this.updateNavigationLines();
      }
    }
    
    updateNavigationLines() {
      // Recalculate and regenerate lines based on current view
      this.createNavigationLines();
      
      // Get updated lines
      this.sliderLines = Array.from(this.querySelectorAll('.slider-line'));
      
      // Update line states
      this.sliderLines.forEach((line, index) => {
        line.setAttribute('aria-selected', index === 0 ? 'true' : 'false');
        
        // Re-add click event listeners
        line.addEventListener('click', (event) => {
          const clickedIndex = parseInt(event.target.getAttribute('data-index'), 10);
          this.goToSlide(clickedIndex);
        });
      });
    }
    
    updateSliderContent() {
      // Calculate the translation based on the width and gap
      const imageWidth = this.imageItems[0].offsetWidth;
      const gap = 77; // Matches the gap in CSS
      const translateX = -this.currentIndex * (imageWidth + gap);
      
      this.slider.style.transform = `translateX(${translateX}px)`;
    }
  }

  customElements.define('slider-component', SliderComponent);
</script>