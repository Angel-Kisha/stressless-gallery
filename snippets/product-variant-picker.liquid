{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{%- unless product.has_only_default_variant -%}
  <variant-selects
    id="variant-selects-{{ section.id }}"
    data-section="{{ section.id }}"
    {{ block.shopify_attributes }}
  >
    {%- for option in product.options_with_values -%}
      {%- liquid
        assign swatch_count = option.values | map: 'swatch' | compact | size
        assign picker_type = block.settings.picker_type

        if swatch_count > 0 and block.settings.swatch_shape != 'none'
          if block.settings.picker_type == 'dropdown'
            assign picker_type = 'swatch_dropdown'
          else
            assign picker_type = 'swatch'
          endif
        endif
      -%}
      {%- if picker_type == 'swatch' -%}
        <fieldset class="js product-form__input product-form__input--swatch">
          <legend class="form__label">
            {{ option.name }}:
            <span data-selected-value>
              {{- option.selected_value -}}
            </span>
          </legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- elsif picker_type == 'button' -%}
        <fieldset class="js product-form__input product-form__input--pill">
          <legend class="form__label">{{ option.name }}</legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- else -%}
        <div class="product-form__input product-form__input--dropdown product-label-dropdown">
          <label class="w-30 form__label product-label-dropdown-text" for="Option-{{ section.id }}-{{ forloop.index0 }}">
            {{ option.name }}
          </label>
          <div class="select w-55">
            {%- if picker_type == 'swatch_dropdown' -%}
              <span
                data-selected-value
                class="dropdown-swatch"
              >
                {% render 'swatch', swatch: option.selected_value.swatch, shape: block.settings.swatch_shape %}
              </span>
            {%- endif -%}
            <select
              id="Option-{{ section.id }}-{{ forloop.index0 }}"
              class="select__select please-select-enabled"
              name="options[{{ option.name | escape }}]"
              form="{{ product_form_id }}"
              data-option-index="{{ forloop.index0 }}"
            >
              {% render 'product-variant-options',
                product: product,
                option: option,
                block: block,
                picker_type: picker_type
              %}
            </select>
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
          </div>
          <div class="divider"></div>
          <div class="w-15">
            <button type="button" class="deselect-button" disabled>選択解除</button>
          </div>
        </div>
      {%- endif -%}
    {%- endfor -%}

    <script type="application/json" data-selected-variant>
      {{ product.selected_or_first_available_variant | json }}
    </script>
  </variant-selects>

  <script>
    // Wait until the page is fully loaded before modifying the variant selector
    window.addEventListener('load', function() {
      setupPleaseSelectOption();
      
      // Set up change event detection for variant selectors
      const selectElements = document.querySelectorAll('#variant-selects-{{ section.id }} select');
      selectElements.forEach(function(select) {
        // Listen for changes to update deselect buttons and select state
        select.addEventListener('change', function() {
          // Short delay to ensure Shopify's code has run
          setTimeout(function() {
            updateSelectAndDeselectState(select);
          }, 10);
        });
      });
      
      // Initialize all deselect buttons and select states
      updateAllSelectsAndDeselectButtons();
    });
    
    function setupPleaseSelectOption() {
      const selects = document.querySelectorAll('#variant-selects-{{ section.id }} select');
      
      selects.forEach(function(select) {
        // Check if we need to add the "Please select" option
        let hasPlaceholder = false;
        for (let i = 0; i < select.options.length; i++) {
          if (select.options[i].value === '' || select.options[i].text === 'Please select') {
            hasPlaceholder = true;
            break;
          }
        }
        
        // Add the "Please select" option if needed
        if (!hasPlaceholder) {
          const pleaseSelectOption = document.createElement('option');
          pleaseSelectOption.value = '';
          pleaseSelectOption.text = 'Please select';
          select.insertBefore(pleaseSelectOption, select.firstChild);
        }
        
        // Force it to be selected
        select.selectedIndex = 0;
        
        // Update price display
        updatePriceRange();
      });
    }
    
    function updatePriceRange() {
      const priceContainer = document.querySelector('#price-{{ section.id }}');
      if (!priceContainer) return;
      
      {% assign min_price = product.price_min | money %}
      {% assign max_price = product.price_max | money %}
      
      if ({{ product.price_min }} < {{ product.price_max }}) {
        const priceElement = priceContainer.querySelector('.price');
        if (priceElement) {
          priceElement.innerHTML = 
            '<span class="price-item price-item--regular">' + 
            '{{ min_price }} - {{ max_price }}' + 
            '</span>';
        }
      }
    }
    
    // Function to update all selects and deselect buttons
    function updateAllSelectsAndDeselectButtons() {
      const selectElements = document.querySelectorAll('#variant-selects-{{ section.id }} select');
      selectElements.forEach(function(select) {
        updateSelectAndDeselectState(select);
      });
    }
    
    // Function to update select disabled state and deselect button
    function updateSelectAndDeselectState(select) {
      // Find the corresponding deselect button
      const parentContainer = select.closest('.product-form__input--dropdown');
      if (!parentContainer) return;
      
      const deselectButton = parentContainer.querySelector('.deselect-button');
      if (!deselectButton) return;
      
      // Check if "Please select" is selected (first option)
      const isFirstOptionSelected = select.selectedIndex === 0;
      
      // Update button state
      deselectButton.disabled = isFirstOptionSelected;
      
      // Update select disabled state - disable if an option is selected, enable if "Please select"
      select.disabled = !isFirstOptionSelected;
    }
    
    // Set up event listeners for deselect buttons
    document.addEventListener('DOMContentLoaded', function() {
      const deselectButtons = document.querySelectorAll('.deselect-button');
      
      deselectButtons.forEach(function(button) {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          
          // Find the associated select element
          const parentContainer = this.closest('.product-form__input--dropdown');
          if (!parentContainer) return;
          
          const select = parentContainer.querySelector('select');
          if (!select) return;
          
          // Re-enable the select so we can change its value
          select.disabled = false;
          
          // Set selection back to "Please select"
          select.selectedIndex = 0;
          
          // Update button state
          this.disabled = true;
          
          // Trigger change event to notify Shopify's code
          const event = new Event('change', { bubbles: true });
          select.dispatchEvent(event);
          
          // Update price display
          updatePriceRange();
          
          // Restore original price if that function exists
          if (typeof window.restoreOriginalPrice === 'function') {
            window.restoreOriginalPrice();
          }
        });
      });
      
      // Initial update of deselect buttons and select states
      updateAllSelectsAndDeselectButtons();
      
      // Add MutationObserver for variant changes
      const variantSelects = document.querySelector('variant-selects');
      if (variantSelects) {
        const observer = new MutationObserver(function() {
          updateAllSelectsAndDeselectButtons();
        });
        
        observer.observe(variantSelects, { 
          attributes: true, 
          childList: true, 
          subtree: true 
        });
      }
    });
  </script>
{%- endunless -%}