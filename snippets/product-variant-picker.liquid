{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{%- unless product.has_only_default_variant -%}
  <variant-selects
    id="variant-selects-{{ section.id }}"
    data-section="{{ section.id }}"
    {{ block.shopify_attributes }}
  >
    {%- for option in product.options_with_values -%}
      {%- liquid
        assign swatch_count = option.values | map: 'swatch' | compact | size
        assign picker_type = block.settings.picker_type

        if swatch_count > 0 and block.settings.swatch_shape != 'none'
          if block.settings.picker_type == 'dropdown'
            assign picker_type = 'swatch_dropdown'
          else
            assign picker_type = 'swatch'
          endif
        endif
      -%}
      {%- if picker_type == 'swatch' -%}
        <fieldset class="js product-form__input product-form__input--swatch">
          <legend class="form__label">
            {{ option.name }}:
            <span data-selected-value>
              {{- option.selected_value -}}
            </span>
          </legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- elsif picker_type == 'button' -%}
        <fieldset class="js product-form__input product-form__input--pill">
          <legend class="form__label">{{ option.name }}</legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- else -%}
        <div class="product-form__input product-form__input--dropdown product-label-dropdown">
          <label
            class="w-30 form__label product-label-dropdown-text"
            for="Option-{{ section.id }}-{{ forloop.index0 }}"
          >
            {{ option.name }}
          </label>
          <div class="select w-55">
            {%- if picker_type == 'swatch_dropdown' -%}
              <span
                data-selected-value
                class="dropdown-swatch"
              >
                {% render 'swatch', swatch: option.selected_value.swatch, shape: block.settings.swatch_shape %}
              </span>
            {%- endif -%}
            <select
              id="Option-{{ section.id }}-{{ forloop.index0 }}"
              class="select__select please-select-enabled"
              name="options[{{ option.name | escape }}]"
              form="{{ product_form_id }}"
              data-option-index="{{ forloop.index0 }}"
            >
              {% render 'product-variant-options',
                product: product,
                option: option,
                block: block,
                picker_type: picker_type
              %}
            </select>
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
          </div>
          <div class="divider"></div>
          <div class="w-15">
            <button type="button" class="deselect-button" disabled>選択解除</button>
          </div>
        </div>
      {%- endif -%}
    {%- endfor -%}

    <script type="application/json" data-selected-variant>
      {{ product.selected_or_first_available_variant | json }}
    </script>
  </variant-selects>

  <script>
    // Add this script to your theme.liquid file or as a separate JS file
    document.addEventListener('DOMContentLoaded', function() {
      // Function to add "Please select" option and set up deselect functionality
      function enhanceVariantSelectors() {
        // Find all variant dropdown selects
        const variantSelects = document.querySelectorAll('.product-form__input--dropdown select');
        
        variantSelects.forEach(function(select) {
          // Add "Please select" option if not present
          let hasPlaceholder = Array.from(select.options).some(option => 
            option.value === '' || option.text === 'Please select'
          );
          
          if (!hasPlaceholder) {
            const pleaseSelectOption = document.createElement('option');
            pleaseSelectOption.value = '';
            pleaseSelectOption.text = 'Please select';
            select.insertBefore(pleaseSelectOption, select.firstChild);
          }
          
          // Find the parent container and deselect button
          const container = select.closest('.product-form__input--dropdown');
          if (!container) return;
          
          const deselectBtn = container.querySelector('.deselect-button');
          if (!deselectBtn) return;
          
          // Set initial state
          deselectBtn.disabled = (select.selectedIndex === 0);
          
          // Check if we've already set up this button
          if (!deselectBtn.hasAttribute('data-setup')) {
            // Mark as set up to avoid duplicate handlers
            deselectBtn.setAttribute('data-setup', 'true');
            
            // Add click handler to deselect button
            deselectBtn.addEventListener('click', function() {
              // Reset select to first option
              select.selectedIndex = 0;
              
              // Disable button
              this.disabled = true;
              
              // Trigger change event
              select.dispatchEvent(new Event('change', { bubbles: true }));
              console.log('Deselect button clicked - reset to first option');
            });
          }
          
          // Check if we've already set up this select
          if (!select.hasAttribute('data-setup')) {
            // Mark as set up to avoid duplicate handlers
            select.setAttribute('data-setup', 'true');
            
            // Add change handler to select
            select.addEventListener('change', function() {
              if (deselectBtn) {
                deselectBtn.disabled = (this.selectedIndex === 0);
                console.log('Select changed, button disabled:', deselectBtn.disabled);
              }
            });
          }
        });
      }
      
      // Run our setup function initially
      enhanceVariantSelectors();
      
      // Run again after a short delay to catch any delayed DOM updates
      setTimeout(enhanceVariantSelectors, 500);
      
      // Watch for any changes to the DOM that might affect our variant selectors
      const observer = new MutationObserver(function(mutations) {
        enhanceVariantSelectors();
      });
      
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
      
      // Also listen for Shopify's variant selection events
      document.addEventListener('variant:changed', function() {
        setTimeout(enhanceVariantSelectors, 100);
      });
    });
  </script>
{%- endunless -%}
