{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{%- unless product.has_only_default_variant -%}
  <variant-selects
    id="variant-selects-{{ section.id }}"
    data-section="{{ section.id }}"
    {{ block.shopify_attributes }}
  >
    {%- for option in product.options_with_values -%}
      {%- liquid
        assign swatch_count = option.values | map: 'swatch' | compact | size
        assign picker_type = block.settings.picker_type

        if swatch_count > 0 and block.settings.swatch_shape != 'none'
          if block.settings.picker_type == 'dropdown'
            assign picker_type = 'swatch_dropdown'
          else
            assign picker_type = 'swatch'
          endif
        endif
      -%}
      {%- if picker_type == 'swatch' -%}
        <fieldset class="js product-form__input product-form__input--swatch">
          <legend class="form__label">
            {{ option.name }}:
            <span data-selected-value>
              {{- option.selected_value -}}
            </span>
          </legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- elsif picker_type == 'button' -%}
        <fieldset class="js product-form__input product-form__input--pill">
          <legend class="form__label">{{ option.name }}</legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- else -%}
        <div class="product-form__input product-form__input--dropdown product-label-dropdown">
          <label
            class="w-30 form__label product-label-dropdown-text"
            for="Option-{{ section.id }}-{{ forloop.index0 }}"
          >
            {{ option.name }}
          </label>
          <div class="select w-55">
            {%- if picker_type == 'swatch_dropdown' -%}
              <span
                data-selected-value
                class="dropdown-swatch"
              >
                {% render 'swatch', swatch: option.selected_value.swatch, shape: block.settings.swatch_shape %}
              </span>
            {%- endif -%}
            <select
              id="Option-{{ section.id }}-{{ forloop.index0 }}"
              class="select__select please-select-enabled"
              name="options[{{ option.name | escape }}]"
              form="{{ product_form_id }}"
              data-option-index="{{ forloop.index0 }}"
            >
              {% render 'product-variant-options',
                product: product,
                option: option,
                block: block,
                picker_type: picker_type
              %}
            </select>
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
          </div>
          <div class="divider"></div>
          <div class="w-15">
            <button type="button" class="deselect-button" disabled>選択解除</button>
          </div>
        </div>
      {%- endif -%}
    {%- endfor -%}

    <script type="application/json" data-selected-variant>
      {{ product.selected_or_first_available_variant | json }}
    </script>
  </variant-selects>

<!-- Add this at the end of your product-template.liquid file -->
<style>
  /* Add a visual indicator when button is disabled vs enabled */
  .deselect-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  .deselect-button:not(:disabled) {
    opacity: 1;
    cursor: pointer;
  }
</style>

<script>
  // Force deselect buttons to work correctly
  document.addEventListener('DOMContentLoaded', function() {
    // Create a completely self-contained fix
    (function() {
      // Function to find all deselect buttons and their corresponding selects
      function findAndFixDeselectButtons() {
        // Find all deselect buttons
        const deselectButtons = document.querySelectorAll('.deselect-button');
        
        deselectButtons.forEach(function(button) {
          // Find the corresponding select element
          const container = button.closest('.product-form__input--dropdown');
          if (!container) return;
          
          const select = container.querySelector('select');
          if (!select) return;
          
          // Set initial button state
          button.disabled = (select.selectedIndex === 0);
          
          // Remove existing event listeners and add new ones
          button.removeEventListener('click', handleDeselectClick);
          button.addEventListener('click', handleDeselectClick);
          
          // Remove existing change listeners from select
          select.removeEventListener('change', handleSelectChange);
          select.addEventListener('change', handleSelectChange);
          
          // Store reference to select in button data
          button.dataset.selectId = select.id || 'select-' + Math.random().toString(36).substring(2, 9);
          if (!select.id) select.id = button.dataset.selectId;
          
          // Log initial state
          console.log('Set up deselect button for select:', select.id, 'Initial disabled state:', button.disabled);
        });
      }
      
      // Handler for deselect button clicks
      function handleDeselectClick(event) {
        console.log('Deselect button clicked');
        const button = event.currentTarget;
        
        // Find the corresponding select
        const selectId = button.dataset.selectId;
        const select = selectId ? document.getElementById(selectId) : null;
        
        if (select) {
          // Reset to first option
          select.selectedIndex = 0;
          
          // Disable button
          button.disabled = true;
          
          // Trigger change event
          select.dispatchEvent(new Event('change', { bubbles: true }));
          
          console.log('Reset select to first option');
        }
      }
      
      // Handler for select changes
      function handleSelectChange(event) {
        const select = event.currentTarget;
        
        // Find all buttons in the same container
        const container = select.closest('.product-form__input--dropdown');
        if (!container) return;
        
        const button = container.querySelector('.deselect-button');
        if (button) {
          // Update button state
          button.disabled = (select.selectedIndex === 0);
          console.log('Select changed, button disabled:', button.disabled);
        }
      }
      
      // Run our fix initially
      findAndFixDeselectButtons();
      
      // Run again after delays to catch any late-loading elements
      setTimeout(findAndFixDeselectButtons, 500);
      setTimeout(findAndFixDeselectButtons, 1000);
      setTimeout(findAndFixDeselectButtons, 2000);
      
      // Also check whenever user interacts with the page
      document.addEventListener('click', function() {
        setTimeout(findAndFixDeselectButtons, 100);
      });
      
      // Watch for variant changes
      document.addEventListener('variant:changed', function() {
        setTimeout(findAndFixDeselectButtons, 100);
      });
    })();
  });
</script>
{%- endunless -%}
