{% comment %}
  Renders product variant-picker with "Please select" default option

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{%- unless product.has_only_default_variant -%}
  <variant-selects
    id="variant-selects-{{ section.id }}"
    data-section="{{ section.id }}"
    {{ block.shopify_attributes }}
  >
    {%- for option in product.options_with_values -%}
      {%- liquid
        assign swatch_count = option.values | map: 'swatch' | compact | size
        assign picker_type = block.settings.picker_type

        if swatch_count > 0 and block.settings.swatch_shape != 'none'
          if block.settings.picker_type == 'dropdown'
            assign picker_type = 'swatch_dropdown'
          else
            assign picker_type = 'swatch'
          endif
        endif
      -%}
      {%- if picker_type == 'swatch' -%}
        <fieldset class="js product-form__input product-form__input--swatch">
          <legend class="form__label">
            {{ option.name }}:
            <span data-selected-value>
              {{- option.selected_value -}}
            </span>
          </legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- elsif picker_type == 'button' -%}
        <fieldset class="js product-form__input product-form__input--pill">
          <legend class="form__label">{{ option.name }}</legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- else -%}
        <div class="product-form__input product-form__input--dropdown product-label-dropdown">
          <label class="w-30 form__label product-label-dropdown-text" for="Option-{{ section.id }}-{{ forloop.index0 }}">
            {{ option.name }}
          </label>
          <div class="select w-55">
            {%- if picker_type == 'swatch_dropdown' -%}
              <span
                data-selected-value
                class="dropdown-swatch"
              >
                {% render 'swatch', swatch: option.selected_value.swatch, shape: block.settings.swatch_shape %}
              </span>
            {%- endif -%}
            <select
              id="Option-{{ section.id }}-{{ forloop.index0 }}"
              class="select__select please-select-enabled"
              name="options[{{ option.name | escape }}]"
              form="{{ product_form_id }}"
              data-option-index="{{ forloop.index0 }}"
            >
              <!-- Standard variant options rendered by the product-variant-options snippet -->
              {% render 'product-variant-options',
                product: product,
                option: option,
                block: block,
                picker_type: picker_type
              %}
            </select>
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
          </div>
          <div class="divider"></div>
          <div class="w-15">
            <button type="button" class="deselect-button">選択解除</button>
          </div>
        </div>
      {%- endif -%}
    {%- endfor -%}

    <script type="application/json" data-selected-variant>
      {{ product.selected_or_first_available_variant | json }}
    </script>
  </variant-selects>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Wait for the Shopify variant selector to fully initialize
      setTimeout(function() {
        initializeCustomVariantSelector();
      }, 100);
      
      // Also handle if the page has been modified by other scripts
      const variantSelects = document.querySelector('variant-selects');
      if (variantSelects) {
        // Monitor for changes to the variant-selects element
        const observer = new MutationObserver(function(mutations) {
          initializeCustomVariantSelector();
        });
        
        // Start observing
        observer.observe(variantSelects, { 
          childList: true, 
          subtree: true, 
          attributes: true,
          attributeFilter: ['selected'] 
        });
      }
      
      function initializeCustomVariantSelector() {
        const selects = document.querySelectorAll('#variant-selects-{{ section.id }} select.please-select-enabled');
        if (!selects.length) return;
        
        selects.forEach(function(select) {
          // Check if "Please select" option already exists
          let pleaseSelectExists = false;
          for (let i = 0; i < select.options.length; i++) {
            if (select.options[i].dataset.pleaseSelect === 'true') {
              pleaseSelectExists = true;
              break;
            }
          }
          
          // Add "Please select" option if it doesn't exist
          if (!pleaseSelectExists) {
            const pleaseSelectOption = document.createElement('option');
            pleaseSelectOption.value = '';
            pleaseSelectOption.textContent = 'Please select';
            pleaseSelectOption.dataset.pleaseSelect = 'true';
            
            // Insert at the beginning
            if (select.firstChild) {
              select.insertBefore(pleaseSelectOption, select.firstChild);
            } else {
              select.appendChild(pleaseSelectOption);
            }
          }
          
          // Set as selected and trigger change event
          select.selectedIndex = 0;
          select.dispatchEvent(new Event('change', {bubbles: true}));
          
          // Override the default Shopify behavior
          const originalOnChange = select.onchange;
          select.onchange = function(e) {
            // If this is a programmatic change from Shopify, prevent it
            if (!e.isTrusted && e.target.selectedIndex !== 0) {
              // Reset back to "Please select"
              setTimeout(() => {
                e.target.selectedIndex = 0;
                updatePriceDisplay();
              }, 0);
              return;
            }
            
            // Otherwise, proceed with normal handling
            if (originalOnChange) originalOnChange.call(this, e);
            updatePriceDisplay();
          };
        });
        
        updatePriceDisplay();
        
        // Update deselect buttons
        document.querySelectorAll('.deselect-button').forEach(button => {
          // Remove existing listeners to prevent duplicates
          const newButton = button.cloneNode(true);
          button.parentNode.replaceChild(newButton, button);
          
          newButton.addEventListener('click', function(e) {
            e.preventDefault();
            const select = this.closest('.product-form__input--dropdown').querySelector('select');
            if (select) {
              select.selectedIndex = 0;
              select.dispatchEvent(new Event('change', {bubbles: true}));
            }
          });
        });
      }
      
      function updatePriceDisplay() {
        const priceContainer = document.querySelector('#price-{{ section.id }}');
        if (!priceContainer) return;
        
        const selects = document.querySelectorAll('#variant-selects-{{ section.id }} select.please-select-enabled');
        const hasEmptyOption = Array.from(selects).some(select => 
          select.selectedIndex === 0 || select.value === '');
          
        if (hasEmptyOption) {
          // Show price range
          {% assign min_price = product.price_min | money %}
          {% assign max_price = product.price_max | money %}
          
          if ({{ product.price_min }} < {{ product.price_max }}) {
            const priceElement = priceContainer.querySelector('.price');
            if (priceElement) {
              priceElement.innerHTML = 
                '<span class="price-item price-item--regular">' + 
                '{{ min_price }} - {{ max_price }}' + 
                '</span>';
            }
          }
        } else if (window.restoreOriginalPrice) {
          window.restoreOriginalPrice();
        }
      }
    });
    
    // Add a more aggressive solution that periodically checks and restores the "Please select" option
    setInterval(function() {
      const selects = document.querySelectorAll('#variant-selects-{{ section.id }} select.please-select-enabled');
      selects.forEach(function(select) {
        // Check if "Please select" option exists at index 0
        if (select.options.length > 0 && !select.options[0].dataset.pleaseSelect) {
          // Recreate "Please select" option
          const pleaseSelectOption = document.createElement('option');
          pleaseSelectOption.value = '';
          pleaseSelectOption.textContent = 'Please select';
          pleaseSelectOption.dataset.pleaseSelect = 'true';
          
          select.insertBefore(pleaseSelectOption, select.firstChild);
          select.selectedIndex = 0;
        }
      });
    }, 500); // Check every 500ms
  </script>
{%- endunless -%}