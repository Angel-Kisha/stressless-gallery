{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{%- unless product.has_only_default_variant -%}
  <variant-selects
    id="variant-selects-{{ section.id }}"
    data-section="{{ section.id }}"
    {{ block.shopify_attributes }}
  >
    {%- for option in product.options_with_values -%}
      {%- liquid
        assign swatch_count = option.values | map: 'swatch' | compact | size
        assign picker_type = block.settings.picker_type

        if swatch_count > 0 and block.settings.swatch_shape != 'none'
          if block.settings.picker_type == 'dropdown'
            assign picker_type = 'swatch_dropdown'
          else
            assign picker_type = 'swatch'
          endif
        endif
      -%}
      {%- if picker_type == 'swatch' -%}
        <fieldset class="js product-form__input product-form__input--swatch">
          <legend class="form__label">
            {{ option.name }}:
            <span data-selected-value>
              {{- option.selected_value -}}
            </span>
          </legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- elsif picker_type == 'button' -%}
        <fieldset class="js product-form__input product-form__input--pill">
          <legend class="form__label">{{ option.name }}</legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- else -%}
        <div class="product-form__input product-form__input--dropdown product-label-dropdown">
          <label
            class="w-30 form__label product-label-dropdown-text"
            for="Option-{{ section.id }}-{{ forloop.index0 }}"
          >
            {{ option.name }}
          </label>
          <div class="select w-55">
            {%- if picker_type == 'swatch_dropdown' -%}
              <span
                data-selected-value
                class="dropdown-swatch"
              >
                {% render 'swatch', swatch: option.selected_value.swatch, shape: block.settings.swatch_shape %}
              </span>
            {%- endif -%}
            <select
              id="Option-{{ section.id }}-{{ forloop.index0 }}"
              class="select__select please-select-enabled"
              name="options[{{ option.name | escape }}]"
              form="{{ product_form_id }}"
              data-option-index="{{ forloop.index0 }}"
              data-default-unselected="true"
            >
              <option value="" selected>Please select</option>
              {% render 'product-variant-options',
                product: product,
                option: option,
                block: block,
                picker_type: picker_type
              %}
            </select>
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
          </div>
          <div class="divider"></div>
          <div class="w-15">
            <button type="button" class="deselect-button" disabled>選択解除</button>
          </div>
        </div>
      {%- endif -%}
    {%- endfor -%}

    <script type="application/json" data-selected-variant>
      {{ product.selected_or_first_available_variant | json }}
    </script>
  </variant-selects>

  <style>
    /* Styles for deselect button */
    .deselect-button {
      width: 100%;
      padding: 8px;
      border-radius: 4px;
      border: 1px solid #ccc;
      font-size: 0.9em;
      cursor: pointer;
      transition: opacity 0.2s ease, background-color 0.2s ease;
    }
    
    .deselect-button:not(:disabled):hover {
      opac
    }
    
    .deselect-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    /* Make sure the select option stays visible */
    .select__select option[selected] {
      font-weight: bold;
    }
    
    /* Force the select to maintain its selection */
    .select__select.user-selected {
      border-color: #4a90e2;
    }
  </style>

  <script>
    (function() {
      // Maintain state of which options have been manually selected
      const selectedOptions = new Map();
      
      // Custom event for when "Please select" is chosen
      const pleaseSelectEvent = new CustomEvent('please-select-chosen', { bubbles: true });
      
      function initializeVariantSelectors() {
        const variantSelects = document.querySelectorAll('.select__select');
        
        variantSelects.forEach((select, index) => {
          // Skip if already initialized
          if (select.hasAttribute('data-initialized')) return;
          select.setAttribute('data-initialized', 'true');
          
          // Find the deselect button for this select
          const container = select.closest('.product-form__input--dropdown');
          if (!container) return;
          
          const deselectButton = container.querySelector('.deselect-button');
          if (!deselectButton) return;
          
          // Get the section and option index for this select
          const sectionId = select.id.split('-')[1];
          const optionIndex = select.dataset.optionIndex;
          
          // Make sure we have a "Please select" option
          let hasPleaseholder = false;
          for (let i = 0; i < select.options.length; i++) {
            if (select.options[i].value === '' || select.options[i].text === 'Please select') {
              hasPleaseholder = true;
              break;
            }
          }
          
          if (!hasPleaseholder) {
            const pleaseOption = new Option('Please select', '', true, true);
            select.insertBefore(pleaseOption, select.firstChild);
          }
          
          // Set correct initial select and button state
          const selectedOption = localStorage.getItem(`variant-${sectionId}-${optionIndex}`);
          if (selectedOption === null || selectedOption === '') {
            // No saved selection or "Please select" was saved
            select.selectedIndex = 0;
            deselectButton.disabled = true;
            select.classList.remove('user-selected');
          } else {
            // Find the option with the saved value
            for (let i = 0; i < select.options.length; i++) {
              if (select.options[i].value === selectedOption) {
                select.selectedIndex = i;
                deselectButton.disabled = false;
                select.classList.add('user-selected');
                break;
              }
            }
          }
          
          // Event handlers
          
          // Handle changes to the select
          const originalChangeHandler = select.onchange;
          select.onchange = null;
          
          select.addEventListener('change', function(e) {
            // Store the selection in both Map and localStorage
            const value = this.value;
            const isDefaultOption = (value === '' || this.selectedIndex === 0);
            
            // Update button state
            deselectButton.disabled = isDefaultOption;
            
            // Update class for styling
            if (isDefaultOption) {
              this.classList.remove('user-selected');
            } else {
              this.classList.add('user-selected');
            }
            
            // Save selection
            selectedOptions.set(`${sectionId}-${optionIndex}`, value);
            localStorage.setItem(`variant-${sectionId}-${optionIndex}`, value);
            
            // Dispatch custom event if "Please select" is chosen
            if (isDefaultOption) {
              this.dispatchEvent(pleaseSelectEvent);
            }
            
            console.log(`Select ${optionIndex} changed to:`, value, 'Default?', isDefaultOption);
          });
          
          // Handle deselect button click
          deselectButton.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            // Reset to "Please select"
            select.selectedIndex = 0;
            this.disabled = true;
            select.classList.remove('user-selected');
            
            // Update stored values
            selectedOptions.delete(`${sectionId}-${optionIndex}`);
            localStorage.removeItem(`variant-${sectionId}-${optionIndex}`);
            
            // Dispatch events
            const changeEvent = new Event('change', { bubbles: true });
            select.dispatchEvent(changeEvent);
            select.dispatchEvent(pleaseSelectEvent);
            
            // Prevent default behavior of variants.js
            setTimeout(() => {
              if (select.selectedIndex !== 0) {
                select.selectedIndex = 0;
                select.dispatchEvent(changeEvent);
              }
            }, 10);
            
            console.log('Deselect button clicked for option', optionIndex);
          });
          
          // Key function: Override Shopify's variant selection to respect our "Please select"
          const variantSelectsElement = document.querySelector(`variant-selects#variant-selects-${sectionId}`);
          if (variantSelectsElement) {
            // Make sure we're always checking selections
            const variantChangedHandler = () => {
              setTimeout(() => {
                // Only override if we want this to stay at "Please select"
                const savedValue = localStorage.getItem(`variant-${sectionId}-${optionIndex}`);
                if (savedValue === '' && select.selectedIndex !== 0) {
                  select.selectedIndex = 0;
                  console.log('Forcing back to "Please select" for option', optionIndex);
                }
              }, 10);
            };
            
            // Listen for Shopify's variant:changed event
            variantSelectsElement.addEventListener('variant:changed', variantChangedHandler);
            
            // Also check periodically
            setInterval(() => {
              const savedValue = localStorage.getItem(`variant-${sectionId}-${optionIndex}`);
              if (savedValue === '' && select.selectedIndex !== 0) {
                select.selectedIndex = 0;
              }
            }, 500);
          }
        });
      }
      
      // Override Shopify's variant selection code
      function overrideVariantSelection() {
        // Look for variant-selects elements
        const variantSelects = document.querySelectorAll('variant-selects');
        
        variantSelects.forEach(variantSelect => {
          // Skip if already processed
          if (variantSelect.hasAttribute('data-override')) return;
          variantSelect.setAttribute('data-override', 'true');
          
          // Get the original updateOptions function
          const originalUpdateOptions = variantSelect.updateOptions;
          if (typeof originalUpdateOptions === 'function') {
            // Override the updateOptions function
            variantSelect.updateOptions = function() {
              // Call the original function
              originalUpdateOptions.apply(this, arguments);
              
              // Then apply our custom logic
              setTimeout(() => {
                const selects = this.querySelectorAll('select');
                selects.forEach((select, index) => {
                  const sectionId = this.dataset.section;
                  const optionIndex = select.dataset.optionIndex;
                  const savedValue = localStorage.getItem(`variant-${sectionId}-${optionIndex}`);
                  
                  if (savedValue === '') {
                    // If we saved "Please select", enforce it
                    select.selectedIndex = 0;
                    const changeEvent = new Event('change', { bubbles: true });
                    select.dispatchEvent(changeEvent);
                  }
                });
              }, 10);
            };
          }
        });
      }
      
      // Initialize everything when the DOM is ready
      document.addEventListener('DOMContentLoaded', function() {
        initializeVariantSelectors();
        overrideVariantSelection();
        
        // Re-run after a short delay to catch any late loading elements
        setTimeout(() => {
          initializeVariantSelectors();
          overrideVariantSelection();
        }, 500);
        
        // Also watch for DOM changes
        const observer = new MutationObserver(function() {
          initializeVariantSelectors();
          overrideVariantSelection();
        });
        
        observer.observe(document.body, {
          childList: true,
          subtree: true,
          attributes: true,
          attributeFilter: ['selected', 'data-variant']
        });
      });
      
      // Re-run when variants change
      document.addEventListener('variant:changed', function() {
        setTimeout(() => {
          initializeVariantSelectors();
        }, 50);
      });
    })();
  </script>
{%- endunless -%}