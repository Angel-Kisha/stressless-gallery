{% comment %}
  Renders product variant-picker with "Please select" default option

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{%- unless product.has_only_default_variant -%}
  <variant-selects
    id="variant-selects-{{ section.id }}"
    data-section="{{ section.id }}"
    {{ block.shopify_attributes }}
  >
    {%- for option in product.options_with_values -%}
      {%- liquid
        assign swatch_count = option.values | map: 'swatch' | compact | size
        assign picker_type = block.settings.picker_type

        if swatch_count > 0 and block.settings.swatch_shape != 'none'
          if block.settings.picker_type == 'dropdown'
            assign picker_type = 'swatch_dropdown'
          else
            assign picker_type = 'swatch'
          endif
        endif
      -%}
      {%- if picker_type == 'swatch' -%}
        <fieldset class="js product-forminput product-forminput--swatch">
          <legend class="formlabel">
            {{ option.name }}:
            <span data-selected-value>
              {{- option.selected_value -}}
            </span>
          </legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- elsif picker_type == 'button' -%}
        <fieldset class="js product-forminput product-forminput--pill">
          <legend class="formlabel">{{ option.name }}</legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- else -%}
        <div class="product-forminput product-forminput--dropdown product-label-dropdown">
          <label class="w-30 formlabel product-label-dropdown-text" for="Option-{{ section.id }}-{{ forloop.index0 }}">
            {{ option.name }}
          </label>
          <div class="select w-55">
            {%- if picker_type == 'swatch_dropdown' -%}
              <span data-selected-value class="dropdown-swatch">
                {% render 'swatch', swatch: option.selected_value.swatch, shape: block.settings.swatch_shape %}
              </span>
            {%- endif -%}
            <select
              id="Option-{{ section.id }}-{{ forloop.index0 }}"
              class="selectselect please-select-enabled"
              name="options[{{ option.name | escape }}]"
              form="{{ product_form_id }}"
              data-option-index="{{ forloop.index0 }}"
            >
              <!-- Standard variant options rendered by the product-variant-options snippet -->
              {% render 'product-variant-options',
                product: product,
                option: option,
                block: block,
                picker_type: picker_type
              %}
            </select>
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
          </div>
          <div class="divider"></div>
          <div class="w-15">
            <button class="deselect-button">選択解除</button>
          </div>
        </div>
      {%- endif -%}
    {%- endfor -%}

    <script type="application/json" data-selected-variant>
      {{ product.selected_or_first_available_variant | json }}
    </script>
  </variant-selects>

  {% comment %} Add JavaScript to modify the variant selectors and price display {% endcomment %}
  <script>
    // This script injects "Please select" option and handles price range display
    document.addEventListener('DOMContentLoaded', function() {
      // Wait a moment to ensure all Shopify scripts have initialized
      setTimeout(function() {
        // Add "Please select" option to all variant dropdowns
        const selects = document.querySelectorAll('#variant-selects-{{ section.id }} select.please-select-enabled');
        
        selects.forEach(select => {
          // Create the "Please select" option
          const pleaseSelectOption = document.createElement('option');
          pleaseSelectOption.value = '';
          pleaseSelectOption.textContent = 'Please select';
          
          // Insert at the beginning
          select.insertBefore(pleaseSelectOption, select.firstChild);
          
          // Set it as selected
          select.selectedIndex = 0;
          
          // Make the previous selection not selected
          if (select.options[1] && select.options[1].hasAttribute('selected')) {
            select.options[1].removeAttribute('selected');
          }
          
          // Force a change event to update the UI
          select.dispatchEvent(new Event('change', { bubbles: true }));
        });
        
        // Now update the price to show as a range
        updatePriceToRange();
        
        // Add event listeners to handle changes to the selects
        selects.forEach(select => {
          select.addEventListener('change', function() {
            const hasEmptySelection = Array.from(selects).some(s => s.value === '');
            if (hasEmptySelection) {
              updatePriceToRange();
            }
          });
        });
        
        // Set up deselect button functionality
        document.querySelectorAll('.deselect-button').forEach(button => {
          button.addEventListener('click', function(e) {
            e.preventDefault();
            // Find the closest select element
            const closestSelect = this.closest('.product-forminput--dropdown').querySelector('select');
            if (closestSelect) {
              // Set to "Please select"
              closestSelect.selectedIndex = 0;
              closestSelect.dispatchEvent(new Event('change', { bubbles: true }));
            }
          });
        });
      }, 100); // Short delay to ensure DOM is fully loaded
    });
    
    // Function to display price range
    function updatePriceToRange() {
      const priceContainer = document.querySelector('#price-{{ section.id }}');
      if (priceContainer) {
        // Get min and max prices from all product variants
        {% assign min_price = product.price_min | money %}
        {% assign max_price = product.price_max | money %}
        
        // Only show as range if there's a difference
        if ({{ product.price_min }} < {{ product.price_max }}) {
          const priceElement = priceContainer.querySelector('.price');
          if (priceElement) {
            priceElement.innerHTML = 
              '<span class="price-item price-item--regular">' + 
              '{{ min_price }} - {{ max_price }}' + 
              '</span>';
          }
        }
      }
    }
  </script>
{%- endunless -%}