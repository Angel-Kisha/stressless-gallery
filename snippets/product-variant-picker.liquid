{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{%- unless product.has_only_default_variant -%}
  <variant-selects
    id="variant-selects-{{ section.id }}"
    data-section="{{ section.id }}"
    {{ block.shopify_attributes }}
  >
    {%- for option in product.options_with_values -%}
      {%- liquid
        assign swatch_count = option.values | map: 'swatch' | compact | size
        assign picker_type = block.settings.picker_type

        if swatch_count > 0 and block.settings.swatch_shape != 'none'
          if block.settings.picker_type == 'dropdown'
            assign picker_type = 'swatch_dropdown'
          else
            assign picker_type = 'swatch'
          endif
        endif
      -%}
      {%- if picker_type == 'swatch' -%}
        <fieldset class="js product-form__input product-form__input--swatch">
          <legend class="form__label">
            {{ option.name }}:
            <span data-selected-value>
              {{- option.selected_value -}}
            </span>
          </legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- elsif picker_type == 'button' -%}
        <fieldset class="js product-form__input product-form__input--pill">
          <legend class="form__label">{{ option.name }}</legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- else -%}
        <div class="product-form__input product-form__input--dropdown product-label-dropdown">
          <label
            class="w-30 form__label product-label-dropdown-text"
            for="Option-{{ section.id }}-{{ forloop.index0 }}"
          >
            {{ option.name }}
          </label>
          <div class="select w-55">
            {%- if picker_type == 'swatch_dropdown' -%}
              <span
                data-selected-value
                class="dropdown-swatch"
              >
                {% render 'swatch', swatch: option.selected_value.swatch, shape: block.settings.swatch_shape %}
              </span>
            {%- endif -%}
            <select
              id="Option-{{ section.id }}-{{ forloop.index0 }}"
              class="select__select please-select-enabled"
              name="options[{{ option.name | escape }}]"
              form="{{ product_form_id }}"
              data-option-index="{{ forloop.index0 }}"
            >
              {% render 'product-variant-options',
                product: product,
                option: option,
                block: block,
                picker_type: picker_type
              %}
            </select>
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
          </div>
          <div class="divider"></div>
          <div class="w-15">
            <button type="button" class="deselect-button" disabled>選択解除</button>
          </div>
        </div>
      {%- endif -%}
    {%- endfor -%}

    <script type="application/json" data-selected-variant>
      {{ product.selected_or_first_available_variant | json }}
    </script>
  </variant-selects>

  <script>
    // Wait for document to be fully loaded
    document.addEventListener('DOMContentLoaded', function() {
      // Function that will be called repeatedly to ensure deselect buttons work
      function setupDeselectButtons() {
        // Find all selects and their corresponding deselect buttons
        const productForms = document.querySelectorAll('.product-form__input--dropdown');
        
        productForms.forEach(function(form) {
          const select = form.querySelector('select');
          const deselectButton = form.querySelector('.deselect-button');
          
          if (!select || !deselectButton) return;
          
          // Remove any existing event listeners to prevent duplicates
          const newDeselectButton = deselectButton.cloneNode(true);
          deselectButton.parentNode.replaceChild(newDeselectButton, deselectButton);
          
          // Set initial state based on current selection
          newDeselectButton.disabled = (select.selectedIndex === 0);
          
          // Add click event listener to the deselect button
          newDeselectButton.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            // Set select back to first option
            select.selectedIndex = 0;
            
            // Disable button
            this.disabled = true;
            
            // Trigger change event on select
            select.dispatchEvent(new Event('change', { bubbles: true }));
            
            // Log for debugging
            console.log('Deselect button clicked - select reset to index 0');
          });
          
          // Remove existing listeners and add a new one to the select
          const newSelect = select.cloneNode(true);
          select.parentNode.replaceChild(newSelect, select);
          
          newSelect.addEventListener('change', function() {
            // Enable/disable button based on selection
            newDeselectButton.disabled = (this.selectedIndex === 0);
            
            // Log for debugging
            console.log('Select changed to index: ' + this.selectedIndex + ', Button disabled: ' + newDeselectButton.disabled);
          });
        });
      }
      
      // Set up buttons initially
      setupDeselectButtons();
      
      // Also set them up after a delay to ensure DOM is fully loaded and processed
      setTimeout(setupDeselectButtons, 500);
      
      // Set up additional check every second for 5 seconds to catch any delayed DOM changes
      let checkCount = 0;
      const interval = setInterval(function() {
        setupDeselectButtons();
        checkCount++;
        if (checkCount >= 5) clearInterval(interval);
      }, 1000);
      
      // Add event listener for variant changes if using Shopify's variant-radios or variant-selects
      document.addEventListener('variant:changed', function() {
        setTimeout(setupDeselectButtons, 100);
      });
    });
  </script>
{%- endunless -%}
