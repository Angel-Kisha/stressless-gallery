{% comment %}
  Renders product variant-picker with "Please select" default option

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{%- unless product.has_only_default_variant -%}
  <variant-selects
    id="variant-selects-{{ section.id }}"
    data-section="{{ section.id }}"
    {{ block.shopify_attributes }}
  >
    {%- for option in product.options_with_values -%}
      {%- liquid
        assign swatch_count = option.values | map: 'swatch' | compact | size
        assign picker_type = block.settings.picker_type

        if swatch_count > 0 and block.settings.swatch_shape != 'none'
          if block.settings.picker_type == 'dropdown'
            assign picker_type = 'swatch_dropdown'
          else
            assign picker_type = 'swatch'
          endif
        endif
      -%}
      {%- if picker_type == 'swatch' -%}
        <fieldset class="js product-form__input product-form__input--swatch">
          <legend class="form__label">
            {{ option.name }}:
            <span data-selected-value>
              {{- option.selected_value -}}
            </span>
          </legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- elsif picker_type == 'button' -%}
        <fieldset class="js product-form__input product-form__input--pill">
          <legend class="form__label">{{ option.name }}</legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- else -%}
        <div class="product-form__input product-form__input--dropdown product-label-dropdown">
          <label class="w-30 form__label product-label-dropdown-text" for="Option-{{ section.id }}-{{ forloop.index0 }}">
            {{ option.name }}
          </label>
          <div class="select w-55">
            {%- if picker_type == 'swatch_dropdown' -%}
              <span
                data-selected-value
                class="dropdown-swatch"
              >
                {% render 'swatch', swatch: option.selected_value.swatch, shape: block.settings.swatch_shape %}
              </span>
            {%- endif -%}
            <select
              id="Option-{{ section.id }}-{{ forloop.index0 }}"
              class="select__select please-select-enabled"
              name="options[{{ option.name | escape }}]"
              form="{{ product_form_id }}"
              data-option-index="{{ forloop.index0 }}"
            >
              <!-- Standard variant options rendered by the product-variant-options snippet -->
              {% render 'product-variant-options',
                product: product,
                option: option,
                block: block,
                picker_type: picker_type
              %}
            </select>
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
          </div>
          <div class="divider"></div>
          <div class="w-15">
            <button type="button" class="deselect-button">選択解除</button>
          </div>
        </div>
      {%- endif -%}
    {%- endfor -%}

    <script type="application/json" data-selected-variant>
      {{ product.selected_or_first_available_variant | json }}
    </script>
  </variant-selects>

  <script>
  document.addEventListener('DOMContentLoaded', function() {
    // Enable price range display and "Please select" options
    const selects = document.querySelectorAll('#variant-selects-{{ section.id }} select.please-select-enabled');
    if (!selects.length) return;
    
    // Store all variants data for later use with the price range
    const variantData = JSON.parse(
      document.querySelector('#variant-selects-{{ section.id }} [data-selected-variant]').textContent
    );
    
    // STEP 1: Add "Please select" option to each dropdown
    selects.forEach(function(select) {
      const pleaseSelectOption = document.createElement('option');
      pleaseSelectOption.value = '';
      pleaseSelectOption.textContent = 'Please select';
      pleaseSelectOption.dataset.pleaseSelect = 'true';
      
      // Insert at the beginning
      if (select.firstChild) {
        select.insertBefore(pleaseSelectOption, select.firstChild);
      } else {
        select.appendChild(pleaseSelectOption);
      }
      
      // Set as selected
      select.selectedIndex = 0;
      
      // Store original variant selection for restore if needed
      select.dataset.originalSelectedIndex = '1'; // First real option
    });
    
    // STEP 2: Handle price range display
    function updatePriceDisplay() {
      const priceContainer = document.querySelector('#price-{{ section.id }}');
      if (!priceContainer) return;
      
      const hasEmptyOption = Array.from(selects).some(select => 
        select.selectedIndex === 0 || select.value === '');
        
      if (hasEmptyOption) {
        // Show price range
        {% assign min_price = product.price_min | money %}
        {% assign max_price = product.price_max | money %}
        
        if ({{ product.price_min }} < {{ product.price_max }}) {
          const priceElement = priceContainer.querySelector('.price');
          if (priceElement) {
            priceElement.innerHTML = 
              '<span class="price-item price-item--regular">' + 
              '{{ min_price }} - {{ max_price }}' + 
              '</span>';
          }
        }
      } else if (window.restoreOriginalPrice) {
        // If all options are selected, restore variant-specific price
        window.restoreOriginalPrice();
      }
    }
    
    // Initialize price display
    updatePriceDisplay();
    
    // STEP 3: Set up event listeners for changes
    selects.forEach(select => {
      select.addEventListener('change', function() {
        updatePriceDisplay();
      });
    });
    
    // STEP 4: Update deselect buttons to work with "Please select"
    document.querySelectorAll('.deselect-button').forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const select = this.closest('.product-form__input--dropdown').querySelector('select');
        if (select) {
          // Set to "Please select" option
          select.selectedIndex = 0;
          select.dispatchEvent(new Event('change', {bubbles: true}));
        }
      });
    });
    
    // STEP 5: Override Shopify's variant selector initialization
    const variantSelects = document.querySelector('variant-selects');
    if (variantSelects) {
      // Create a MutationObserver to watch for Shopify's changes
      const observer = new MutationObserver(function(mutations) {
        let needsReset = false;
        mutations.forEach(function(mutation) {
          if (mutation.type === 'attributes' || 
              (mutation.type === 'childList' && mutation.target.tagName === 'SELECT')) {
            needsReset = true;
          }
        });
        
        if (needsReset) {
          // Reset to "Please select" after Shopify's changes
          setTimeout(function() {
            selects.forEach(select => {
              if (select.selectedIndex !== 0) {
                select.selectedIndex = 0;
                select.dispatchEvent(new Event('change', {bubbles: true}));
              }
            });
            updatePriceDisplay();
          }, 0);
        }
      });
      
      // Start observing all selects
      const config = { attributes: true, childList: true, subtree: true };
      selects.forEach(select => observer.observe(select, config));
    }
    
    // Need to force this after variant-selects custom element is initialized
    setTimeout(function() {
      selects.forEach(select => {
        select.selectedIndex = 0;
        select.dispatchEvent(new Event('change', {bubbles: true}));
      });
      updatePriceDisplay();
    }, 500);
  });
</script>
{%- endunless -%}